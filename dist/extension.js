"use strict";var ie=Object.create;var M=Object.defineProperty;var oe=Object.getOwnPropertyDescriptor;var ce=Object.getOwnPropertyNames;var ae=Object.getPrototypeOf,de=Object.prototype.hasOwnProperty;var le=(i,e,t)=>e in i?M(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var a=(i,e)=>M(i,"name",{value:e,configurable:!0});var ue=(i,e)=>{for(var t in e)M(i,t,{get:e[t],enumerable:!0})},te=(i,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of ce(e))!de.call(i,s)&&s!==t&&M(i,s,{get:()=>e[s],enumerable:!(r=oe(e,s))||r.enumerable});return i};var y=(i,e,t)=>(t=i!=null?ie(ae(i)):{},te(e||!i||!i.__esModule?M(t,"default",{value:i,enumerable:!0}):t,i)),ge=i=>te(M({},"__esModule",{value:!0}),i);var T=(i,e,t)=>le(i,typeof e!="symbol"?e+"":e,t);var Pe={};ue(Pe,{activate:()=>pe,deactivate:()=>Se,getExtensionState:()=>be,getLogger:()=>Ce,isExtensionInitialized:()=>we});module.exports=ge(Pe);var U=y(require("vscode"));var m=y(require("vscode"));var k=y(require("vscode"));var q=class q{logger;activeProgressOperations=new Map;constructor(e){this.logger=e}handleConfigurationError(e,t){let r={category:"configuration",severity:"medium",message:`Configuration error${t?` in ${t}`:""}`,userMessage:"Invalid configuration detected",suggestedActions:["Check your extension settings","Verify IP address and port format","Reset to default values if needed"],technicalDetails:e.message,originalError:e};return e.message.includes("IP address")?(r.userMessage="Invalid IP address format",r.suggestedActions=["Use format: 192.168.1.100 or localhost","Check your device's IP address in settings","Ensure device is on the same network"]):e.message.includes("port")?(r.userMessage="Invalid port number",r.suggestedActions=["Use a port number between 1 and 65535","Common ADB ports: 5555, 5037","Check your device's wireless debugging port"]):(e.message.includes("binary")||e.message.includes("path"))&&(r.category="binary",r.userMessage="Binary path configuration error",r.suggestedActions=["Check if custom binary paths exist","Verify file permissions","Reset to use bundled binaries"]),this.logAndNotifyError(r),r}handleConnectionError(e,t){let s={category:"connection",severity:"high",message:`Connection failed to ${t?`${t.ip}:${t.port}`:"device"}`,userMessage:"Failed to connect to Android device",suggestedActions:["Check device IP address and port","Ensure device is on the same network","Enable wireless debugging on device","Try connecting via USB first"],technicalDetails:e.message,originalError:e},n=e.message.toLowerCase();return n.includes("connection refused")?(s.severity="high",s.userMessage="Device refused connection",s.suggestedActions=["Enable wireless debugging on your device","Check if the port is correct","Restart ADB on your device","Try pairing the device first"]):n.includes("timeout")||n.includes("timed out")?(s.severity="medium",s.userMessage="Connection timeout",s.suggestedActions=["Check network connectivity","Move device closer to router","Restart wireless debugging","Try a different network"]):n.includes("no route to host")?(s.severity="high",s.userMessage="Device not reachable",s.suggestedActions=["Verify the IP address is correct","Check if device is on the same network","Ping the device to test connectivity","Check firewall settings"]):n.includes("unauthorized")?(s.severity="medium",s.userMessage="Device authorization required",s.suggestedActions=["Accept debugging authorization on device","Check device screen for permission dialog","Try connecting via USB first","Clear ADB keys and reconnect"]):n.includes("offline")&&(s.severity="high",s.userMessage="Device is offline",s.suggestedActions=["Check device connection","Restart wireless debugging","Reconnect device to network","Try USB connection"]),this.logAndNotifyError(s),s}handleProcessError(e,t,r){let s={category:"process",severity:"high",message:`${t} process failed`,userMessage:`Failed to execute ${t}`,suggestedActions:["Check if binaries are properly installed","Verify file permissions","Try restarting the extension","Check the logs for more details"],technicalDetails:e.message,originalError:e};return t.toLowerCase().includes("adb")?(s.userMessage="ADB command failed",s.suggestedActions=["Check if ADB is properly installed","Verify device connection","Restart ADB server","Check device authorization"]):t.toLowerCase().includes("scrcpy")&&(s.userMessage="Screen mirroring failed",e.message.includes("already running")?(s.severity="medium",s.userMessage="Screen mirroring already active",s.suggestedActions=["Stop the current scrcpy instance first","Check for existing scrcpy windows","Wait a moment and try again"]):e.message.includes("device not found")?(s.severity="high",s.userMessage="No device found for screen mirroring",s.suggestedActions=["Connect to device first","Check device connection status","Enable USB debugging","Try reconnecting the device"]):s.suggestedActions=["Check if scrcpy is properly installed","Verify device supports screen mirroring","Try connecting device via USB","Check device permissions"]),this.logAndNotifyError(s),s}handleSystemError(e,t){let r={category:"system",severity:"critical",message:`System error${t?` in ${t}`:""}`,userMessage:"System error occurred",suggestedActions:["Restart VSCode","Check system resources","Update the extension","Report the issue if it persists"],technicalDetails:e.message,originalError:e};return e.message.includes("permission")?(r.category="binary",r.severity="high",r.userMessage="Permission denied",r.suggestedActions=["Check file permissions","Run VSCode with appropriate permissions","Verify binary executable permissions","Check antivirus software"]):(e.message.includes("ENOENT")||e.message.includes("not found"))&&(r.category="binary",r.severity="high",r.userMessage="Required file not found",r.suggestedActions=["Reinstall the extension","Check if binaries are present","Verify installation integrity","Check custom binary paths"]),this.logAndNotifyError(r),r}handleValidationError(e,t,r){let s={category:"validation",severity:"medium",message:`Validation failed for ${e}`,userMessage:`Invalid ${e} format`,suggestedActions:[r?`Use format: ${r}`:"Check the input format","Refer to documentation for examples","Use default values if unsure"],technicalDetails:`Invalid value: ${t}`};return e.toLowerCase().includes("ip")?s.suggestedActions=["Use format: 192.168.1.100",'Use "localhost" for local connections',"Check device network settings"]:e.toLowerCase().includes("port")&&(s.suggestedActions=["Use a number between 1 and 65535","Common ADB port: 5555","Check device wireless debugging settings"]),this.logAndNotifyError(s),s}async showProgress(e,t,r){if(r&&this.activeProgressOperations.has(r)){let n=this.activeProgressOperations.get(r);n==null||n.cancel(),this.activeProgressOperations.delete(r)}let s=new k.CancellationTokenSource;r&&this.activeProgressOperations.set(r,s);try{this.logger.info(`Starting progress operation: ${t.title}`);let n=await k.window.withProgress({location:t.location,title:t.title,cancellable:t.cancellable},async(o,u)=>{if(u.isCancellationRequested||s.token.isCancellationRequested)throw new Error("Operation cancelled by user");return await e(o,u)});return this.logger.info(`Progress operation completed: ${t.title}`),n}catch(n){throw n instanceof Error&&n.message.includes("cancelled")?(this.logger.info(`Progress operation cancelled: ${t.title}`),this.showWarning("Operation cancelled by user")):this.logger.error(`Progress operation failed: ${t.title}`,n instanceof Error?n:void 0),n}finally{r&&this.activeProgressOperations.delete(r),s.dispose()}}cancelProgress(e){let t=this.activeProgressOperations.get(e);t&&(t.cancel(),this.activeProgressOperations.delete(e),this.logger.info(`Cancelled progress operation: ${e}`))}cancelAllProgress(){for(let[e,t]of this.activeProgressOperations)t.cancel(),this.logger.info(`Cancelled progress operation: ${e}`);this.activeProgressOperations.clear()}showSuccess(e,t){let r=t?`${e} - ${t}`:e;this.logger.showSuccess(r)}showError(e,t){if(this.logger.showError(e),t&&t.length>0){let r=`Suggested actions: ${t.join(", ")}`;this.logger.info(r)}}showWarning(e){this.logger.showWarning(e)}showInfo(e){k.window.showInformationMessage(e),this.logger.info(e)}async showErrorWithActions(e,t){let r=t.map(n=>n.title),s=await k.window.showErrorMessage(e,...r);if(s){let n=t.find(o=>o.title===s);if(n)try{await n.action()}catch(o){this.logger.error("Action execution failed",o instanceof Error?o:void 0)}}}validateAndHandleInput(e,t,r){if(!e||e.trim().length===0)return{isValid:!1,error:this.handleValidationError(r,e,`Non-empty ${t}`)};let s=e.trim();if(t==="ip"){if(s==="localhost"||s==="127.0.0.1")return{isValid:!0};if(!/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(s))return{isValid:!1,error:this.handleValidationError(r,s,"192.168.1.100 or localhost")}}else if(t==="port"){let n=parseInt(s,10);if(isNaN(n)||n<1||n>65535)return{isValid:!1,error:this.handleValidationError(r,s,"1-65535")}}return{isValid:!0}}handleMultipleErrors(e,t){let r=[];for(let s of e){let n;s.message.includes("connect")||s.message.includes("network")?n=this.handleConnectionError(s):s.message.includes("config")||s.message.includes("setting")?n=this.handleConfigurationError(s):s.message.includes("process")||s.message.includes("spawn")?n=this.handleProcessError(s,t):n=this.handleSystemError(s,t),r.push(n)}if(r.length>1){let s=`Multiple errors occurred in ${t}: ${r.length} issues found`;this.showError(s)}return r}getErrorStatistics(){return{configuration:0,connection:0,process:0,system:0,validation:0,binary:0}}logAndNotifyError(e){switch(this.logger.error(`[${e.category.toUpperCase()}] ${e.message}`,e.originalError),e.severity){case"critical":this.showError(e.userMessage,e.suggestedActions);break;case"high":this.showError(e.userMessage,e.suggestedActions);break;case"medium":this.showWarning(e.userMessage);break;case"low":this.showInfo(e.userMessage);break}}dispose(){this.cancelAllProgress()}};a(q,"ErrorHandler");var A=q;var Y=class Y{processManager;configManager;logger;errorHandler;sidebarProvider;statusUpdateInterval;constructor(e,t,r,s){this.processManager=e,this.configManager=t,this.logger=r,this.errorHandler=new A(r),this.sidebarProvider=s,this.sidebarProvider&&this.startStatusUpdates()}registerCommands(e){[m.commands.registerCommand("droidbridge.connectDevice",(r,s)=>this.connectDeviceCommand(r,s)),m.commands.registerCommand("droidbridge.disconnectDevice",()=>this.disconnectDeviceCommand()),m.commands.registerCommand("droidbridge.launchScrcpy",()=>this.launchScrcpyCommand()),m.commands.registerCommand("droidbridge.launchScrcpyScreenOff",()=>this.launchScrcpyScreenOffCommand()),m.commands.registerCommand("droidbridge.stopScrcpy",()=>this.stopScrcpyCommand()),m.commands.registerCommand("droidbridge.showLogs",()=>this.showLogsCommand())].forEach(r=>e.subscriptions.push(r)),this.logger.info("All DroidBridge commands registered successfully")}async connectDeviceCommand(e,t){try{this.logger.info("Connect Device command executed");let r=this.configManager.getConfigWithDefaults(),s=e||r.ip,n=t||r.port;if(!e||!t){let g=await m.window.showInputBox({prompt:"Enter the IP address of your Android device",value:s,validateInput:a(p=>p.trim()?this.configManager.validateIpAddress(p.trim())?null:"Please enter a valid IP address (e.g., 192.168.1.100 or localhost)":"IP address cannot be empty","validateInput")});if(g===void 0){this.logger.info("Connect Device command cancelled by user");return}s=g.trim();let h=await m.window.showInputBox({prompt:"Enter the port number for ADB connection",value:n,validateInput:a(p=>p.trim()?this.configManager.validatePort(p.trim())?null:"Please enter a valid port number (1-65535)":"Port cannot be empty","validateInput")});if(h===void 0){this.logger.info("Connect Device command cancelled by user");return}n=h.trim()}if(!this.errorHandler.validateAndHandleInput(s,"ip","IP address").isValid||!this.errorHandler.validateAndHandleInput(n,"port","Port number").isValid)return;let d={title:`\u{1F50C} Connecting to ${s}:${n}...`,cancellable:!0,location:m.ProgressLocation.Notification};await this.errorHandler.showProgress(async(g,h)=>{if(h.isCancellationRequested)throw new Error("Connection cancelled by user");g.report({message:"Establishing connection..."});let p=await this.connectDevice(s,n);return p&&(g.report({message:"Connected successfully",increment:100}),this.errorHandler.showSuccess(`Device connected to ${s}:${n}`)),p},d,"connect-device")}catch(r){if(r instanceof Error&&r.message.includes("cancelled")){this.logger.info("Connect Device command cancelled by user");return}this.errorHandler.handleSystemError(r instanceof Error?r:new Error("Unknown error"),"Connect Device command")}}async disconnectDeviceCommand(){try{if(this.logger.info("Disconnect Device command executed"),!this.processManager.isDeviceConnected()){this.logger.showWarning("No device is currently connected");return}let e=this.processManager.getConnectionState(),t=e.deviceIp&&e.devicePort?`${e.deviceIp}:${e.devicePort}`:"device",r={title:`\u{1F50C} Disconnecting from ${t}...`,cancellable:!1,location:m.ProgressLocation.Notification};await this.errorHandler.showProgress(async s=>{s.report({message:"Disconnecting device..."});let n=await this.disconnectDevice();return n&&(s.report({message:"Disconnected successfully",increment:100}),this.errorHandler.showSuccess(`Device disconnected from ${t}`)),n},r,"disconnect-device")}catch(e){this.errorHandler.handleSystemError(e instanceof Error?e:new Error("Unknown error"),"Disconnect Device command")}}async launchScrcpyCommand(){try{if(this.logger.info("Launch Scrcpy command executed"),this.processManager.isScrcpyRunning()){this.logger.showWarning("Scrcpy is already running. Stop the current instance first.");return}if(!this.processManager.isDeviceConnected()){let t=await m.window.showWarningMessage("No device is connected. Would you like to connect to a device first?",{title:"Connect Device"},{title:"Launch Anyway"});if((t==null?void 0:t.title)==="Connect Device"&&(await this.connectDeviceCommand(),!this.processManager.isDeviceConnected()))return}let e={title:"\u{1F4F1} Launching scrcpy...",cancellable:!0,location:m.ProgressLocation.Notification};await this.errorHandler.showProgress(async(t,r)=>{if(r.isCancellationRequested)throw new Error("Scrcpy launch cancelled by user");t.report({message:"Starting screen mirroring..."});let s=await this.launchScrcpy();return s&&(t.report({message:"Screen mirroring started",increment:100}),this.errorHandler.showSuccess("Scrcpy launched successfully")),s},e,"launch-scrcpy")}catch(e){if(e instanceof Error&&e.message.includes("cancelled")){this.logger.info("Launch Scrcpy command cancelled by user");return}this.errorHandler.handleProcessError(e instanceof Error?e:new Error("Unknown error"),"scrcpy","Launch Scrcpy command")}}async launchScrcpyScreenOffCommand(){try{if(this.logger.info("Launch Scrcpy Screen Off command executed"),this.processManager.isScrcpyRunning()){this.logger.showWarning("Scrcpy is already running. Stop the current instance first.");return}if(!this.processManager.isDeviceConnected()){let t=await m.window.showWarningMessage("No device is connected. Would you like to connect to a device first?",{title:"Connect Device"},{title:"Launch Anyway"});if((t==null?void 0:t.title)==="Connect Device"&&(await this.connectDeviceCommand(),!this.processManager.isDeviceConnected()))return}let e={title:"\u{1F4F1} Launching scrcpy with screen off...",cancellable:!0,location:m.ProgressLocation.Notification};await this.errorHandler.showProgress(async(t,r)=>{if(r.isCancellationRequested)throw new Error("Scrcpy screen off launch cancelled by user");t.report({message:"Starting screen mirroring with screen off..."});let s=await this.launchScrcpyScreenOff();return s&&(t.report({message:"Screen mirroring started with screen off",increment:100}),this.errorHandler.showSuccess("Scrcpy launched successfully with screen off")),s},e,"launch-scrcpy-screen-off")}catch(e){if(e instanceof Error&&e.message.includes("cancelled")){this.logger.info("Launch Scrcpy Screen Off command cancelled by user");return}this.errorHandler.handleProcessError(e instanceof Error?e:new Error("Unknown error"),"scrcpy screen off","Launch Scrcpy Screen Off command")}}async stopScrcpyCommand(){try{if(this.logger.info("Stop Scrcpy command executed"),!this.processManager.isScrcpyRunning()){this.logger.showWarning("Scrcpy is not currently running");return}let e={title:"\u{1F4F1} Stopping scrcpy...",cancellable:!1,location:m.ProgressLocation.Notification};await this.errorHandler.showProgress(async t=>{t.report({message:"Stopping screen mirroring..."});let r=await this.stopScrcpy();return r&&(t.report({message:"Screen mirroring stopped",increment:100}),this.errorHandler.showSuccess("Scrcpy stopped successfully")),r},e,"stop-scrcpy")}catch(e){this.errorHandler.handleProcessError(e instanceof Error?e:new Error("Unknown error"),"scrcpy","Stop Scrcpy command")}}showLogsCommand(){try{this.logger.info("Show Logs command executed"),this.logger.show()}catch(e){this.errorHandler.handleSystemError(e instanceof Error?e:new Error("Unknown error"),"Show Logs command")}}async connectDevice(e,t){let r=this.configManager.getConfigWithDefaults(),s=e||r.ip,n=t||r.port;try{let o=this.configManager.validateConnection(s,n);if(!o.isValid){let d=`Invalid connection parameters: ${o.errors.join(", ")}`;return this.logger.showError(d),!1}if(!await this.processManager.connectDevice(s,n)){let d=this.processManager.getConnectionState(),g=new Error(d.connectionError||"Failed to connect to device");return this.errorHandler.handleConnectionError(g,{ip:s,port:n}),this.sidebarProvider&&this.sidebarProvider.updateConnectionStatus(!1),!1}return this.sidebarProvider&&this.sidebarProvider.updateConnectionStatus(!0,s,n),!0}catch(o){return this.errorHandler.handleConnectionError(o instanceof Error?o:new Error("Unknown connection error"),{ip:s,port:n}),!1}}async disconnectDevice(){try{if(!await this.processManager.disconnectDevice()){let t=this.processManager.getConnectionState(),r=new Error(t.connectionError||"Failed to disconnect from device");return this.errorHandler.handleConnectionError(r),this.sidebarProvider&&this.sidebarProvider.updateConnectionStatus(!1),!1}return this.sidebarProvider&&this.sidebarProvider.updateConnectionStatus(!1),!0}catch(e){return this.errorHandler.handleConnectionError(e instanceof Error?e:new Error("Unknown disconnection error")),!1}}async launchScrcpy(){try{if(this.processManager.isScrcpyRunning()){let t=new Error("Scrcpy is already running");return this.errorHandler.handleProcessError(t,"scrcpy"),!1}let e=await this.processManager.launchScrcpy();if(!e||!e.pid){let t=new Error("Failed to launch scrcpy - invalid process");return this.errorHandler.handleProcessError(t,"scrcpy"),this.sidebarProvider&&this.sidebarProvider.updateScrcpyStatus(!1),!1}return this.sidebarProvider&&this.sidebarProvider.updateScrcpyStatus(!0),!0}catch(e){return this.errorHandler.handleProcessError(e instanceof Error?e:new Error("Unknown scrcpy launch error"),"scrcpy"),!1}}async launchScrcpyScreenOff(){try{if(this.processManager.isScrcpyRunning()){let t=new Error("Scrcpy is already running");return this.errorHandler.handleProcessError(t,"scrcpy screen off"),!1}let e=await this.processManager.launchScrcpyScreenOff();if(!e||!e.pid){let t=new Error("Failed to launch scrcpy with screen off - invalid process");return this.errorHandler.handleProcessError(t,"scrcpy screen off"),this.sidebarProvider&&this.sidebarProvider.updateScrcpyStatus(!1),!1}return this.sidebarProvider&&this.sidebarProvider.updateScrcpyStatus(!0),!0}catch(e){return this.errorHandler.handleProcessError(e instanceof Error?e:new Error("Unknown scrcpy screen off launch error"),"scrcpy screen off"),!1}}async stopScrcpy(){try{if(!await this.processManager.stopScrcpy()){let t=new Error("Failed to stop scrcpy");return this.errorHandler.handleProcessError(t,"scrcpy"),!1}return this.sidebarProvider&&this.sidebarProvider.updateScrcpyStatus(!1),!0}catch(e){return this.errorHandler.handleProcessError(e instanceof Error?e:new Error("Unknown scrcpy stop error"),"scrcpy"),!1}}isDeviceConnected(){return this.processManager.isDeviceConnected()}isScrcpyRunning(){return this.processManager.isScrcpyRunning()}getConnectionState(){return this.processManager.getConnectionState()}getScrcpyState(){return this.processManager.getScrcpyState()}setSidebarProvider(e){this.sidebarProvider=e,this.statusUpdateInterval||this.startStatusUpdates(),this.updateSidebarState()}startStatusUpdates(){this.statusUpdateInterval||(this.statusUpdateInterval=setInterval(()=>{this.updateSidebarState()},2e3))}stopStatusUpdates(){this.statusUpdateInterval&&(clearInterval(this.statusUpdateInterval),this.statusUpdateInterval=void 0)}updateSidebarState(){if(this.sidebarProvider)try{let e=this.processManager.getConnectionState(),t=this.processManager.getScrcpyState();this.sidebarProvider.synchronizeState(e,t)}catch(e){this.logger.error("Failed to update sidebar state",e instanceof Error?e:void 0)}}refreshSidebarState(){this.updateSidebarState()}dispose(){this.stopStatusUpdates(),this.errorHandler.dispose()}};a(Y,"CommandManager");var B=Y;var X=require("child_process");var C=y(require("os")),re=y(require("path"));var J=class J{static getBinaryExtension(){return C.platform()==="win32"?".exe":""}static getBinaryPath(e){return`${e}${this.getBinaryExtension()}`}static async makeExecutable(e){if(C.platform()!=="win32"){let t=await import("fs/promises");try{let s=(await t.stat(e)).mode,n=s|73;s!==n&&await t.chmod(e,n)}catch(r){throw new Error(`Failed to make ${e} executable: ${r instanceof Error?r.message:String(r)}`)}}}static async isExecutable(e){if(C.platform()==="win32"){let r=await import("fs/promises");try{return await r.access(e),!0}catch{return!1}}let t=await import("fs/promises");try{return await t.access(e,t.constants.F_OK|t.constants.X_OK),!0}catch{return!1}}static getPlatformSpecificOptions(e={}){let t={stdio:["pipe","pipe","pipe"],...e};switch(C.platform()){case"win32":return{...t,shell:!0,windowsHide:!0,env:{...process.env,...t.env}};case"darwin":return{...t,env:{...process.env,...t.env}};case"linux":return{...t,env:{...process.env,...t.env}};default:return t}}static getCurrentPlatform(){let e=C.platform();switch(e){case"win32":return"win32";case"darwin":return"darwin";case"linux":return"linux";default:throw new Error(`Unsupported platform: ${e}`)}}static getCurrentArchitecture(){let e=C.arch();switch(e){case"x64":return"x64";case"arm64":return"arm64";case"ia32":return"x86";default:return e}}static getPlatformBinaryDir(){let e=this.getCurrentPlatform(),t=this.getCurrentArchitecture();return e}static normalizePath(e){return re.normalize(e)}static supportsFeature(e){let t=C.platform();switch(e){case"executable-permissions":return t!=="win32";case"shell-execution":return!0;case"process-signals":return t!=="win32";default:return!1}}static getTerminationSignal(){return C.platform()==="win32","SIGTERM"}static getForceKillSignal(){return C.platform()==="win32","SIGKILL"}static getTempDir(){return C.tmpdir()}static isSupportedPlatform(){try{return this.getCurrentPlatform(),!0}catch{return!1}}};a(J,"PlatformUtils");var l=J;var Z=class Z{scrcpyProcess=null;managedProcesses=new Set;binaryManager;logger;errorHandler;connectionState;scrcpyState;constructor(e,t){this.binaryManager=e,this.logger=t,this.errorHandler=new A(t),this.connectionState={connected:!1},this.scrcpyState={running:!1}}async executeAdbCommand(e){let t=this.binaryManager.getAdbPath();return new Promise(r=>{var d,g;let s="",n="";this.logger.info(`Executing ADB command: ${t} ${e.join(" ")}`);let o=l.getPlatformSpecificOptions({stdio:["pipe","pipe","pipe"]}),u=(0,X.spawn)(t,e,o);this.managedProcesses.add(u),(d=u.stdout)==null||d.on("data",h=>{let p=h.toString();s+=p,this.logger.logProcessOutput("adb",p)}),(g=u.stderr)==null||g.on("data",h=>{let p=h.toString();n+=p,this.logger.logProcessOutput("adb",p)}),u.on("close",h=>{this.managedProcesses.delete(u);let p=h??-1,I={success:p===0,stdout:s.trim(),stderr:n.trim(),exitCode:p};this.logger.info(`ADB command completed with exit code: ${p}`),r(I)}),u.on("error",h=>{this.managedProcesses.delete(u),this.logger.error(`ADB process error: ${h.message}`,h),r({success:!1,stdout:s.trim(),stderr:h.message,exitCode:-1})})})}async connectDevice(e,t){var r,s;try{let n=this.errorHandler.validateAndHandleInput(e,"ip","IP address");if(!n.isValid)return this.connectionState={connected:!1,connectionError:((r=n.error)==null?void 0:r.userMessage)||"Invalid IP address"},!1;let o=this.errorHandler.validateAndHandleInput(t,"port","Port number");if(!o.isValid)return this.connectionState={connected:!1,connectionError:((s=o.error)==null?void 0:s.userMessage)||"Invalid port number"},!1;let u=`${e}:${t}`;this.logger.info(`Attempting to connect to device at ${u}`);let d=await this.executeAdbCommand(["connect",u]);if(d.success){if(this.parseConnectResult(d.stdout,u))return this.connectionState={connected:!0,deviceIp:e,devicePort:t,lastConnected:new Date,connectionError:void 0},this.logger.info(`Successfully connected to device at ${u}`),!0;{let h=this.extractConnectionError(d.stdout,d.stderr);return this.connectionState={connected:!1,connectionError:h},this.logger.error(`Failed to connect to device at ${u}: ${h}`),!1}}else{let g=this.extractConnectionError(d.stdout,d.stderr);return this.connectionState={connected:!1,connectionError:g},this.logger.error(`ADB connect command failed: ${g}`),!1}}catch(n){let o=n instanceof Error?n.message:"Unknown error";return this.logger.error(`Connection attempt failed: ${o}`,n instanceof Error?n:void 0),this.connectionState={connected:!1,connectionError:o},!1}}async disconnectDevice(){try{if(!this.connectionState.connected||!this.connectionState.deviceIp||!this.connectionState.devicePort)return this.logger.info("No device currently connected"),!0;let e=`${this.connectionState.deviceIp}:${this.connectionState.devicePort}`;this.logger.info(`Attempting to disconnect from device at ${e}`);let t=await this.executeAdbCommand(["disconnect",e]);if(t.success)return this.connectionState={connected:!1,connectionError:void 0},this.logger.info(`Successfully disconnected from device at ${e}`),!0;{let r=this.extractConnectionError(t.stdout,t.stderr);return this.logger.error(`Failed to disconnect from device: ${r}`),this.connectionState={connected:!1,connectionError:r},!1}}catch(e){let t=e instanceof Error?e.message:"Unknown error";return this.logger.error(`Disconnect attempt failed: ${t}`,e instanceof Error?e:void 0),this.connectionState={connected:!1,connectionError:t},!1}}async checkDeviceConnectivity(){try{this.logger.info("Checking device connectivity");let e=await this.executeAdbCommand(["devices"]);if(!e.success)return this.logger.error("Failed to check device connectivity"),this.connectionState={...this.connectionState,connected:!1,connectionError:"Failed to query ADB devices"},!1;let t=this.parseDevicesOutput(e.stdout);return t!==this.connectionState.connected&&(this.connectionState={...this.connectionState,connected:t,connectionError:t?void 0:"Device no longer connected"},this.logger.info(`Device connectivity status updated: ${t?"connected":"disconnected"}`)),t}catch(e){let t=e instanceof Error?e.message:"Unknown error";return this.logger.error(`Connectivity check failed: ${t}`,e instanceof Error?e:void 0),this.connectionState={...this.connectionState,connected:!1,connectionError:t},!1}}getConnectionState(){return{...this.connectionState}}isDeviceConnected(){return this.connectionState.connected}async launchScrcpy(e){return this.launchScrcpyWithCustomArgs(e)}async stopScrcpy(){return this.scrcpyProcess?new Promise(e=>{let t=this.scrcpyProcess;this.logger.info("Stopping scrcpy process");let r=a(()=>{this.managedProcesses.delete(t),this.scrcpyProcess=null,this.scrcpyState={running:!1},this.logger.info("Scrcpy process stopped successfully"),e(!0)},"cleanup"),s=setTimeout(()=>{if(t&&!t.killed){this.logger.info("Force killing scrcpy process");let n=l.getForceKillSignal();t.kill(n)}r()},3e3);if(t.on("close",()=>{clearTimeout(s),r()}),t&&!t.killed){let n=l.getTerminationSignal();t.kill(n)}else clearTimeout(s),r()}):(this.scrcpyState={running:!1},!0)}isScrcpyRunning(){let e=this.scrcpyProcess!==null&&!this.scrcpyProcess.killed;return this.scrcpyState.running!==e&&(this.scrcpyState={...this.scrcpyState,running:e}),e}getScrcpyState(){return this.isScrcpyRunning(),{...this.scrcpyState}}getScrcpyUptime(){return!this.isScrcpyRunning()||!this.scrcpyState.startTime?null:Date.now()-this.scrcpyState.startTime.getTime()}monitorScrcpyProcess(){if(!this.scrcpyProcess)return;let e=this.scrcpyProcess;(e.killed||e.exitCode!==null)&&(this.logger.info("Detected scrcpy process termination during monitoring"),this.managedProcesses.delete(e),this.scrcpyProcess=null,this.scrcpyState={running:!1})}async cleanup(){this.logger.info("Cleaning up all managed processes");let e=[];this.isScrcpyRunning()&&e.push(this.stopScrcpy().then(()=>{}));for(let t of this.managedProcesses)t.killed||e.push(new Promise(r=>{t.on("close",()=>r());let s=l.getTerminationSignal();t.kill(s),setTimeout(()=>{if(!t.killed){let n=l.getForceKillSignal();t.kill(n)}r()},2e3)}));await Promise.all(e),this.managedProcesses.clear(),this.scrcpyProcess=null,this.scrcpyState={running:!1},this.logger.info("Process cleanup completed")}isValidIpAddress(e){return/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(e)}isValidPort(e){let t=parseInt(e,10);return!isNaN(t)&&t>=1&&t<=65535}parseConnectResult(e,t){let r=e.toLowerCase();return r.includes("connected to")||r.includes("already connected")?!0:(r.includes("failed to connect")||r.includes("cannot connect")||r.includes("connection refused")||r.includes("no route to host")||r.includes("timeout"),!1)}parseDevicesOutput(e){if(!this.connectionState.deviceIp||!this.connectionState.devicePort)return!1;let t=`${this.connectionState.deviceIp}:${this.connectionState.devicePort}`,r=e.split(`
`);for(let s of r){let n=s.trim();if(n.startsWith(t)&&n.includes("device"))return!0}return!1}extractConnectionError(e,t){let r=(e+" "+t).toLowerCase();return r.includes("connection refused")?"Connection refused. Make sure the device is reachable and ADB debugging is enabled.":r.includes("no route to host")?"No route to host. Check the IP address and network connectivity.":r.includes("timeout")||r.includes("timed out")?"Connection timeout. The device may be unreachable or busy.":r.includes("failed to connect")?"Failed to connect to device. Verify the IP address and port are correct.":r.includes("cannot connect")?"Cannot connect to device. Check if wireless debugging is enabled.":r.includes("device offline")?"Device is offline. Try reconnecting the device.":r.includes("unauthorized")?"Device unauthorized. Please accept the debugging authorization on your device.":t.trim()||e.trim()||"Unknown connection error occurred."}async launchScrcpyScreenOff(e){let t={...e};return this.logger.info("Launching scrcpy with screen off functionality"),this.launchScrcpyWithCustomArgs(t,["--turn-screen-off"])}async launchScrcpyWithCustomArgs(e,t=[]){if(this.isScrcpyRunning())throw new Error("Scrcpy is already running. Stop the current instance first.");let r=this.binaryManager.getScrcpyPath(),s=[...this.buildScrcpyArgs(e),...t];return this.logger.info(`Launching scrcpy: ${r} ${s.join(" ")}`),this.scrcpyState={running:!1,startTime:new Date,options:e?{...e}:void 0},new Promise((n,o)=>{var p,j;let u=l.getPlatformSpecificOptions({stdio:["pipe","pipe","pipe"],detached:!1}),d=(0,X.spawn)(r,s,u);this.scrcpyProcess=d,this.managedProcesses.add(d);let g=!1,h=a(I=>{let ne=I.toString();this.logger.logProcessOutput("scrcpy",ne),g||(g=!0,this.scrcpyState={running:!0,process:d,startTime:this.scrcpyState.startTime,options:this.scrcpyState.options},this.logger.info("Scrcpy process started successfully"),n(d))},"onData");(p=d.stdout)==null||p.on("data",h),(j=d.stderr)==null||j.on("data",h),d.on("close",I=>{this.managedProcesses.delete(d),this.scrcpyProcess===d&&(this.scrcpyProcess=null,this.scrcpyState={running:!1}),this.logger.info(`Scrcpy process closed with exit code: ${I}`)}),d.on("error",I=>{this.managedProcesses.delete(d),this.scrcpyProcess===d&&(this.scrcpyProcess=null,this.scrcpyState={running:!1}),this.logger.error(`Scrcpy process error: ${I.message}`,I),g||(g=!0,o(I))}),setTimeout(()=>{g||(g=!0,this.scrcpyState={running:!1},o(new Error("Scrcpy failed to start within timeout period")))},5e3)})}buildScrcpyArgs(e){let t=[];return e!=null&&e.bitrate&&t.push("--bit-rate",e.bitrate.toString()),e!=null&&e.maxSize&&t.push("--max-size",e.maxSize.toString()),e!=null&&e.crop&&t.push("--crop",e.crop),e!=null&&e.recordFile&&t.push("--record",e.recordFile),t}};a(Z,"ProcessManager");var R=Z;var S=y(require("vscode"));var f=class f{getDefaultIp(){return S.workspace.getConfiguration(f.CONFIG_SECTION).get("defaultIp",f.DEFAULT_IP).trim()||f.DEFAULT_IP}getDefaultPort(){return S.workspace.getConfiguration(f.CONFIG_SECTION).get("defaultPort",f.DEFAULT_PORT).trim()||f.DEFAULT_PORT}getCustomAdbPath(){return S.workspace.getConfiguration(f.CONFIG_SECTION).get("adbPath","").trim()||void 0}getCustomScrcpyPath(){return S.workspace.getConfiguration(f.CONFIG_SECTION).get("scrcpyPath","").trim()||void 0}getValidatedConfig(){let e=this.getDefaultIp(),t=this.getDefaultPort(),r=this.getCustomAdbPath(),s=this.getCustomScrcpyPath(),n=[];return this.validateIpAddress(e)||n.push(`Invalid IP address: ${e}`),this.validatePort(t)||n.push(`Invalid port: ${t}`),{defaultIp:e,defaultPort:t,customAdbPath:r,customScrcpyPath:s,isValid:n.length===0,errors:n}}validateIpAddress(e){if(!e||typeof e!="string")return!1;let t=e.trim();return t==="localhost"||t==="127.0.0.1"?!0:/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$/.test(t)?t.split(".").every(n=>{if(n.length>1&&n.startsWith("0"))return!1;let o=parseInt(n,10);return o>=0&&o<=255}):!1}validatePort(e){if(e==null)return!1;let t;if(typeof e=="string"){let r=e.trim();if(r===""||r.includes(".")||!/^\d+$/.test(r)||r.length>1&&r.startsWith("0"))return!1;t=parseInt(r,10)}else t=e;return!isNaN(t)&&Number.isInteger(t)&&t>=1&&t<=65535}validateConnection(e,t){let r=[];return this.validateIpAddress(e)||r.push(`Invalid IP address: ${e}. Must be a valid IPv4 address or 'localhost'.`),this.validatePort(t)||r.push(`Invalid port: ${t}. Must be a number between 1 and 65535.`),{isValid:r.length===0,errors:r}}getConfigWithDefaults(){let e=this.getDefaultIp(),t=this.getDefaultPort();return{ip:this.validateIpAddress(e)?e:f.DEFAULT_IP,port:this.validatePort(t)?t:f.DEFAULT_PORT}}onConfigurationChanged(e){return S.workspace.onDidChangeConfiguration(t=>{t.affectsConfiguration(f.CONFIG_SECTION)&&e()})}async updateConfig(e,t,r=S.ConfigurationTarget.Workspace){await S.workspace.getConfiguration(f.CONFIG_SECTION).update(e,t,r)}async resetToDefaults(){let e=S.workspace.getConfiguration(f.CONFIG_SECTION);await Promise.all([e.update("defaultIp",void 0,S.ConfigurationTarget.Workspace),e.update("defaultPort",void 0,S.ConfigurationTarget.Workspace),e.update("adbPath",void 0,S.ConfigurationTarget.Workspace),e.update("scrcpyPath",void 0,S.ConfigurationTarget.Workspace)])}};a(f,"ConfigManager"),T(f,"CONFIG_SECTION","droidbridge"),T(f,"DEFAULT_IP","192.168.1.100"),T(f,"DEFAULT_PORT","5555");var H=f;var K=y(require("path")),x=y(require("fs/promises"));var Q=class Q{extensionPath;configManager;constructor(e,t){this.extensionPath=e,this.configManager=t}getAdbPath(){let e=this.configManager.getCustomAdbPath();return e||this.getBundledBinaryPath("adb")}getScrcpyPath(){let e=this.configManager.getCustomScrcpyPath();return e||this.getBundledBinaryPath("scrcpy")}async validateBinaries(){let e=[],t=!1,r=!1;try{let s=this.getAdbPath();t=await this.validateBinary(s,"adb"),t||e.push(`ADB binary not found or not executable: ${s}`)}catch(s){e.push(`Error validating ADB binary: ${s instanceof Error?s.message:String(s)}`)}try{let s=this.getScrcpyPath();r=await this.validateBinary(s,"scrcpy"),r||e.push(`Scrcpy binary not found or not executable: ${s}`)}catch(s){e.push(`Error validating scrcpy binary: ${s instanceof Error?s.message:String(s)}`)}return{adbValid:t,scrcpyValid:r,errors:e}}async extractBinaries(){let e=l.getCurrentPlatform(),t=K.join(this.extensionPath,"binaries",e);try{await x.mkdir(t,{recursive:!0});let r=this.getBundledBinaryPath("adb"),s=this.getBundledBinaryPath("scrcpy"),n=[{name:"adb",path:r},{name:"scrcpy",path:s}];for(let o of n)try{await x.access(o.path),l.supportsFeature("executable-permissions")&&(await l.isExecutable(o.path)||await l.makeExecutable(o.path))}catch{console.warn(`Binary ${o.name} not found at ${o.path}. This is expected during development.`)}}catch(r){throw new Error(`Failed to extract binaries: ${r instanceof Error?r.message:String(r)}`)}}getBinaryInfo(){let e=this.configManager.getCustomAdbPath(),t=this.configManager.getCustomScrcpyPath();return{adb:{path:this.getAdbPath(),isCustom:!!e,bundledPath:this.getBundledBinaryPath("adb")},scrcpy:{path:this.getScrcpyPath(),isCustom:!!t,bundledPath:this.getBundledBinaryPath("scrcpy")}}}async hasBundledBinaries(){let e=l.getCurrentPlatform(),t=K.join(this.extensionPath,"binaries",e);try{return(await x.stat(t)).isDirectory()}catch{return!1}}async checkBinaryIntegrity(){let e=[],t=!1,r=!1;try{if(!l.isSupportedPlatform())return e.push(`Unsupported platform: ${l.getCurrentPlatform()}`),{adb:!1,scrcpy:!1,errors:e};let s=this.getAdbPath();t=await this.checkSingleBinaryIntegrity(s,"adb"),t||e.push(`ADB binary integrity check failed: ${s}`);let n=this.getScrcpyPath();r=await this.checkSingleBinaryIntegrity(n,"scrcpy"),r||e.push(`Scrcpy binary integrity check failed: ${n}`)}catch(s){e.push(`Binary integrity check failed: ${s instanceof Error?s.message:String(s)}`)}return{adb:t,scrcpy:r,errors:e}}getPlatformInfo(){return{platform:l.getCurrentPlatform(),architecture:l.getCurrentArchitecture(),binaryExtension:l.getBinaryExtension(),supportsExecutablePermissions:l.supportsFeature("executable-permissions")}}getBundledBinaryPath(e){let t=l.getCurrentPlatform(),r=l.getBinaryExtension();return K.join(this.extensionPath,"binaries",t,`${e}${r}`)}async validateBinary(e,t){try{if(!(await x.stat(e)).isFile())return!1;if(l.supportsFeature("executable-permissions")&&!await l.isExecutable(e))try{await l.makeExecutable(e)}catch{return!1}return!0}catch{return!1}}async checkSingleBinaryIntegrity(e,t){try{let r=await x.stat(e);if(!r.isFile()||r.size===0)return!1;if(l.getCurrentPlatform()==="win32"){let n=l.getBinaryExtension();if(n&&!e.endsWith(n))return!1}else if(!await l.isExecutable(e))try{return await l.makeExecutable(e),await l.isExecutable(e)}catch{return!1}return!0}catch{return!1}}};a(Q,"BinaryManager");var N=Q;var E=y(require("vscode"));var ee=class ee{outputChannel;logLevel=1;constructor(){this.outputChannel=E.window.createOutputChannel("DroidBridge Logs")}setLogLevel(e){this.logLevel=e}getLogLevel(){return this.logLevel}formatTimestamp(){return new Date().toISOString().replace("T"," ").replace("Z","")}debug(e){if(this.logLevel<=0){let t=this.formatTimestamp();this.outputChannel.appendLine(`[${t}] DEBUG: ${e}`)}}info(e){if(this.logLevel<=1){let t=this.formatTimestamp();this.outputChannel.appendLine(`[${t}] INFO: ${e}`)}}error(e,t){let s=`[${this.formatTimestamp()}] ERROR: ${e}`;t&&(s+=`
Error Details: ${t.message}`,t.stack&&(s+=`
Stack Trace:
${t.stack}`)),this.outputChannel.appendLine(s)}logProcessOutput(e,t,r=!1){let s=this.formatTimestamp(),n=r?"STDERR":"STDOUT";this.outputChannel.appendLine(`[${s}] PROCESS ${n}: ${e}`),t.trim()&&t.trim().split(`
`).forEach(u=>{this.outputChannel.appendLine(`  ${u}`)}),this.outputChannel.appendLine("")}showProgress(e){return this.info(`Progress: ${e}`),E.window.withProgress({location:E.ProgressLocation.Notification,title:e,cancellable:!1},async()=>{})}showProgressWithCancel(e,t=!0){return this.info(`Progress (cancellable): ${e}`),E.window.withProgress({location:E.ProgressLocation.Notification,title:e,cancellable:t},async(r,s)=>new Promise((n,o)=>{s.isCancellationRequested&&o(new Error("Operation cancelled by user")),n()}))}showSuccess(e){E.window.showInformationMessage(e),this.info(`SUCCESS: ${e}`)}showError(e,t){let r=e;t&&(r+=` (${t.message})`),E.window.showErrorMessage(r),this.error(`USER ERROR: ${e}`,t)}showWarning(e){E.window.showWarningMessage(e),this.info(`WARNING: ${e}`)}show(){this.outputChannel.show()}clear(){this.outputChannel.clear(),this.info("Log cleared")}dispose(){this.outputChannel.dispose()}};a(ee,"Logger");var V=ee;var w=y(require("vscode"));var b=y(require("vscode"));var P=class P{currentTheme;themeChangeListeners=[];disposables=[];constructor(){this.currentTheme=this.detectCurrentTheme(),this.setupThemeChangeListener()}static getInstance(){return P.instance||(P.instance=new P),P.instance}detectCurrentTheme(){switch(b.window.activeColorTheme.kind){case b.ColorThemeKind.Light:return 1;case b.ColorThemeKind.Dark:return 2;case b.ColorThemeKind.HighContrast:return 3;case b.ColorThemeKind.HighContrastLight:return 4;default:return 2}}setupThemeChangeListener(){let e=b.window.onDidChangeActiveColorTheme(t=>{let r=this.mapColorThemeKindToThemeKind(t.kind);if(r!==this.currentTheme){let s=this.currentTheme;this.currentTheme=r,this.themeChangeListeners.forEach(n=>{try{n(r)}catch(o){console.error("Error in theme change listener:",o)}})}});this.disposables.push(e)}mapColorThemeKindToThemeKind(e){switch(e){case b.ColorThemeKind.Light:return 1;case b.ColorThemeKind.Dark:return 2;case b.ColorThemeKind.HighContrast:return 3;case b.ColorThemeKind.HighContrastLight:return 4;default:return 2}}getCurrentTheme(){return this.currentTheme}isDarkTheme(){return this.currentTheme===2||this.currentTheme===3}isLightTheme(){return this.currentTheme===1||this.currentTheme===4}getThemeSpecificIcon(e,t){let r=this.isDarkTheme()?"dark":"light";return b.Uri.joinPath(t,"media","icons",r,`${e}.svg`)}getWebviewIconUri(e,t,r){let s=this.getThemeSpecificIcon(e,t);return r.asWebviewUri(s)}getThemeCssClass(){switch(this.currentTheme){case 1:return"vscode-light";case 2:return"vscode-dark";case 3:return"vscode-high-contrast";case 4:return"vscode-high-contrast-light";default:return"vscode-dark"}}onThemeChanged(e){return this.themeChangeListeners.push(e),{dispose:a(()=>{let t=this.themeChangeListeners.indexOf(e);t>=0&&this.themeChangeListeners.splice(t,1)},"dispose")}}getThemeVariables(){return`
      :root {
        --theme-kind: '${this.getThemeCssClass()}';
        --is-dark-theme: ${this.isDarkTheme()?"true":"false"};
        --is-light-theme: ${this.isLightTheme()?"true":"false"};
      }
    `}refreshTheme(){let e=this.detectCurrentTheme();if(e!==this.currentTheme){let t=this.currentTheme;this.currentTheme=e,this.themeChangeListeners.forEach(r=>{try{r(e)}catch(s){console.error("Error in theme change listener during refresh:",s)}})}}dispose(){this.disposables.forEach(e=>e.dispose()),this.disposables=[],this.themeChangeListeners=[]}static resetInstance(){P.instance&&(P.instance.dispose(),P.instance=void 0)}};a(P,"ThemeManager"),T(P,"instance");var L=P;var z=class z{constructor(e,t,r){this._extensionUri=e;this._context=t;this.configManager=r,this.themeManager=L.getInstance(),this.loadDefaultValues(),this.setupConfigurationWatcher(),this.setupThemeChangeListener()}_view;connectionStatus=!1;scrcpyStatus=!1;currentIp="";currentPort="";configManager;configChangeListener;themeManager;themeChangeListener;loadDefaultValues(){let e=this.configManager.getConfigWithDefaults();this.currentIp=e.ip,this.currentPort=e.port}setupConfigurationWatcher(){this.configChangeListener=this.configManager.onConfigurationChanged(()=>{this.loadDefaultValues(),this._updateWebviewState()}),this._context.subscriptions.push(this.configChangeListener)}setupThemeChangeListener(){this.themeChangeListener=this.themeManager.onThemeChanged(e=>{this._view&&(this._view.webview.html=this._getHtmlForWebview(this._view.webview),this._view.webview.postMessage({type:"themeChanged",theme:e,isDark:this.themeManager.isDarkTheme(),isLight:this.themeManager.isLightTheme(),themeCssClass:this.themeManager.getThemeCssClass()}))}),this._context.subscriptions.push(this.themeChangeListener)}resolveWebviewView(e,t,r){this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage(s=>{switch(s.type){case"connectDevice":w.commands.executeCommand("droidbridge.connectDevice",s.ip,s.port);break;case"disconnectDevice":w.commands.executeCommand("droidbridge.disconnectDevice");break;case"launchScrcpy":w.commands.executeCommand("droidbridge.launchScrcpy");break;case"launchScrcpyScreenOff":w.commands.executeCommand("droidbridge.launchScrcpyScreenOff");break;case"stopScrcpy":w.commands.executeCommand("droidbridge.stopScrcpy");break;case"showLogs":w.commands.executeCommand("droidbridge.showLogs");break;case"ipChanged":this.currentIp=s.value;break;case"portChanged":this.currentPort=s.value;break}},void 0,this._context.subscriptions)}_getHtmlForWebview(e){let t=e.asWebviewUri(w.Uri.joinPath(this._extensionUri,"media","main.js")),r=e.asWebviewUri(w.Uri.joinPath(this._extensionUri,"media","reset.css")),s=e.asWebviewUri(w.Uri.joinPath(this._extensionUri,"media","vscode.css")),n=e.asWebviewUri(w.Uri.joinPath(this._extensionUri,"media","main.css")),o=this.themeManager.getWebviewIconUri("plug",this._extensionUri,e),u=this.themeManager.getWebviewIconUri("device-mobile",this._extensionUri,e),d=this.themeManager.getThemeCssClass(),g=this.themeManager.getThemeVariables(),h=he();return`<!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${h}'; img-src ${e.cspSource} data:;">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="${r}" rel="stylesheet">
        <link href="${s}" rel="stylesheet">
        <link href="${n}" rel="stylesheet">
        <style>
          ${g}
        </style>
        <title>DroidBridge</title>
      </head>
      <body class="${d}">
        <div class="container ${d}">
          <!-- Connect Section -->
          <div class="section">
            <div class="section-header">
              <img src="${o}" alt="Connect" width="16" height="16" class="section-icon" />
              <h3>Connect</h3>
            </div>
            <div class="section-content">
              <div class="status-indicator" id="connection-status">
                <span class="codicon codicon-x status-icon"></span>
                <span class="status-text">Disconnected</span>
              </div>
              
              <div class="input-group">
                <label for="ip-input">IP Address:</label>
                <input type="text" id="ip-input" placeholder="192.168.1.100" value="${this.currentIp}">
              </div>
              
              <div class="input-group">
                <label for="port-input">Port:</label>
                <input type="text" id="port-input" placeholder="5555" value="${this.currentPort}">
              </div>
              
              <div class="button-group">
                <button id="connect-btn" class="primary-button" ${!this.connectionStatus&&this.currentIp&&this.currentPort?"":"disabled"}>
                  <span class="codicon codicon-plug"></span>
                  Connect Device
                </button>
                <button id="disconnect-btn" class="secondary-button" ${this.connectionStatus?"":"disabled"}>
                  <span class="codicon codicon-debug-disconnect"></span>
                  Disconnect
                </button>
              </div>
            </div>
          </div>

          <!-- Scrcpy Section -->
          <div class="section">
            <div class="section-header">
              <img src="${u}" alt="Device" width="16" height="16" class="section-icon" />
              <h3>Scrcpy</h3>
            </div>
            <div class="section-content">
              <div class="status-indicator" id="scrcpy-status">
                <span class="codicon codicon-stop status-icon"></span>
                <span class="status-text">Stopped</span>
              </div>
              
              <div class="button-group">
                <button id="launch-scrcpy-btn" class="primary-button" ${!this.scrcpyStatus&&this.connectionStatus?"":"disabled"}>
                  <span class="codicon codicon-play"></span>
                  Launch Scrcpy
                </button>
                <button id="launch-scrcpy-screen-off-btn" class="secondary-button" ${!this.scrcpyStatus&&this.connectionStatus?"":"disabled"}>
                  <span class="codicon codicon-play-circle"></span>
                  Launch (Screen Off)
                </button>
                <button id="stop-scrcpy-btn" class="secondary-button" ${this.scrcpyStatus?"":"disabled"}>
                  <span class="codicon codicon-stop"></span>
                  Stop Scrcpy
                </button>
              </div>
            </div>
          </div>

          <!-- Logs Section -->
          <div class="section">
            <div class="section-content">
              <button id="show-logs-btn" class="secondary-button">
                <span class="codicon codicon-output"></span>
                Show Logs
              </button>
            </div>
          </div>
        </div>

        <script nonce="${h}" src="${t}"></script>
      </body>
      </html>`}refresh(){this._view&&(this._view.webview.html=this._getHtmlForWebview(this._view.webview))}_updateWebviewState(){this._view&&this._view.webview.postMessage({type:"updateState",connectionStatus:this.connectionStatus,scrcpyStatus:this.scrcpyStatus,currentIp:this.currentIp,currentPort:this.currentPort})}updateConnectionStatus(e,t,r){this.connectionStatus=e,t&&(this.currentIp=t),r&&(this.currentPort=r),this._updateWebviewState()}updateScrcpyStatus(e){this.scrcpyStatus=e,this._updateWebviewState()}updateIpAddress(e){this.currentIp=e,this._updateWebviewState()}updatePort(e){this.currentPort=e,this._updateWebviewState()}getConnectionStatus(){return this.connectionStatus}getScrcpyStatus(){return this.scrcpyStatus}getCurrentIp(){return this.currentIp}getCurrentPort(){return this.currentPort}reset(){this.connectionStatus=!1,this.scrcpyStatus=!1,this.loadDefaultValues(),this._updateWebviewState()}synchronizeState(e,t){let r=!1;this.connectionStatus!==e.connected&&(this.connectionStatus=e.connected,r=!0),e.connected&&e.deviceIp&&e.devicePort&&(this.currentIp!==e.deviceIp||this.currentPort!==e.devicePort)&&(this.currentIp=e.deviceIp,this.currentPort=e.devicePort,r=!0),this.scrcpyStatus!==t.running&&(this.scrcpyStatus=t.running,r=!0),r&&this._updateWebviewState()}forceRefresh(){this.loadDefaultValues(),this.refresh()}getCurrentState(){return{connectionStatus:this.connectionStatus,scrcpyStatus:this.scrcpyStatus,currentIp:this.currentIp,currentPort:this.currentPort}}dispose(){this.configChangeListener&&this.configChangeListener.dispose(),this.themeChangeListener&&this.themeChangeListener.dispose()}};a(z,"DroidBridgeSidebarProvider"),T(z,"viewType","droidbridge.sidebar");var W=z;function he(){let i="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let t=0;t<32;t++)i+=e.charAt(Math.floor(Math.random()*e.length));return i}a(he,"getNonce");var v,c,O,F,$,_,D,G;function pe(i){c=new V,c.info("DroidBridge extension is activating...");try{fe(i),me(),ve(i),ye(i),se(),v.initialized=!0,c.info("DroidBridge extension activated successfully")}catch(e){throw c.error("Failed to activate DroidBridge extension",e),U.window.showErrorMessage("Failed to activate DroidBridge extension. Check the logs for details."),e}}a(pe,"activate");function fe(i){c.info("Initializing manager classes..."),$=new H,c.debug("ConfigManager initialized"),G=L.getInstance(),c.debug("ThemeManager initialized"),_=new N(i.extensionPath,$),c.debug("BinaryManager initialized"),F=new R(_,c),c.debug("ProcessManager initialized"),D=new W(U.Uri.file(i.extensionPath),i,$),c.debug("DroidBridgeSidebarProvider initialized"),O=new B(F,$,c,D),c.debug("CommandManager initialized"),O.setSidebarProvider(D),c.debug("Manager cross-references established")}a(fe,"initializeManagers");function me(){v={connection:{connected:!1},scrcpy:{running:!1},initialized:!1,binariesValidated:!1},c.debug("Extension state initialized")}a(me,"initializeExtensionState");function ve(i){c.info("Registering VSCode components...");let e=U.window.registerWebviewViewProvider("droidbridge-sidebar",D);i.subscriptions.push(e),c.debug("Sidebar webview provider registered"),O.registerCommands(i),c.debug("All commands registered"),c.info("All VSCode components registered successfully")}a(ve,"registerVSCodeComponents");function ye(i){c.info("Setting up configuration watchers...");let e=$.onConfigurationChanged(()=>{c.info("Configuration changed, refreshing extension state"),D.refresh(),se()});i.subscriptions.push(e),c.debug("Configuration watchers set up")}a(ye,"setupConfigurationWatchers");function se(){_.validateBinaries().then(i=>{v.binariesValidated=i.adbValid&&i.scrcpyValid,v.binariesValidated?c.info("All binaries validated successfully"):(c.error("Binary validation failed",new Error(i.errors.join(", "))),U.window.showWarningMessage("Some DroidBridge binaries are not available. Check the logs for details.","Show Logs").then(e=>{e==="Show Logs"&&c.show()}))}).catch(i=>{c.error("Failed to validate binaries",i),v.binariesValidated=!1})}a(se,"validateBinariesAsync");async function Se(){c&&c.info("DroidBridge extension is deactivating...");let i=[];try{O&&(c.debug("Disposing command manager..."),O.dispose()),D&&(c.debug("Disposing sidebar provider..."),D.dispose()),F&&(c.debug("Cleaning up process manager..."),i.push(F.cleanup())),await Promise.all(i),G&&(c.debug("Disposing theme manager..."),G.dispose()),v&&(v.initialized=!1,v.binariesValidated=!1,v.connection.connected=!1,v.scrcpy.running=!1),c&&(c.info("DroidBridge extension deactivated successfully"),c.dispose())}catch(e){let t=e instanceof Error?e.message:"Unknown error";if(console.error("Error during extension deactivation:",t),c)try{c.error("Error during extension deactivation",e instanceof Error?e:void 0)}catch(r){console.error("Failed to log deactivation error:",r)}}finally{v=void 0,c=void 0,O=void 0,F=void 0,$=void 0,_=void 0,D=void 0,G=void 0}}a(Se,"deactivate");function be(){return v}a(be,"getExtensionState");function Ce(){return c}a(Ce,"getLogger");function we(){return(v==null?void 0:v.initialized)===!0}a(we,"isExtensionInitialized");0&&(module.exports={activate,deactivate,getExtensionState,getLogger,isExtensionInitialized});
